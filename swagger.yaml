swagger: '2.0'
info:
  version: 1.0.0
  title: PLI API Documentation
host: localhost:8080
schemes:
  - http
tags:
  - name: Users
  - name: Shops
  - name: Products
  - name: Orders
paths:
  /login:
    post:
      tags:
        - Users
      summary: Connect an user
      description: 'Used to connect an user'
      operationId: loginUser
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: "email"
          in: formData
          description: Email address of the user
          required: true
          type: "string"
        - name: password
          in: formData
          description: Password of the user
          required: true
          type: "string"
      responses:
        200:
          description: "User successfully logged in"
          example: { status: 200, message: "Successfully logged in", data: { "infos": { "user": { "uid": "2JdFQbUDBEhNN9PFtcb7CHcx2qy2", "displayName": null, "photoURL": null, "email": "poulet_t@etna-alternance.net", "emailVerified": false, "phoneNumber": null, "isAnonymous": false, "providerData": [ { "uid": "poulet_t@etna-alternance.net", "displayName": null, "photoURL": null, "email": "poulet_t@etna-alternance.net", "phoneNumber": null, "providerId": "password" }], "apiKey": "AIzaSyC9UTXwsOHrJkolyA8lo-bnjYJnWhI-VSw", "appName": "[DEFAULT]", "authDomain": "etna-pli-c4463.firebaseapp.com", "stsTokenManager": { "apiKey": "AIzaSyC9UTXwsOHrJkolyA8lo-bnjYJnWhI-VSw", "refreshToken": "", "accessToken": "", "expirationTime": 1537519249370 }, "redirectEventId": null, "lastLoginAt": "1537515643000", "createdAt": "1537515643000" }, "credential": null, "additionalUserInfo": { "providerId": "password", "isNewUser": false }, "operationType": "signIn"} } }
        400:
          description: "Bad request"
          example: { status: 400, message: "Bad request", data: null }
        401:
          description: "Wrong password"
          example: { status: 401, message: "Some error message", data: null }
        403:
          description: "Email already in use"
          example: { status: 403, message: "Some error message", data: null }
        404:
          description: "User not found"
          example: { status: 404, message: "Some error message", data: null }

  /orders/{order_id}:
    get:
      tags:
        - Orders
      summary: Get order details
      description: 'Used to get details for an order'
      operationId: getOrderDetails
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: order_id
          in: path
          description: Id of the order
          required: true
          type: "string"
      responses:
        200:
          description: "Success"
          example: { status: 200, message: "Success", data: { "id": "1no9f8o2zx", "user": null, "shop": "1o3ui7yat4", "products": [ { "shop_id": "1o3ui7yat4", "name": "Couscous Congolais", "pictures": [ "/url/1", "/url/2" ], "id": "uemtuvtcz2", "price": 99.99, "stock": 79 }, { "shop_id": "1o3ui7yat4", "name": "Couscous Congolais", "pictures": [ "/url/1", "/url/2" ], "id": "uemtuvtcz2", "price": 99.99, "stock": 79 } ], "price": 199.98 } }
        404:
          description: "Order not found"
          example: { status: 404, message: "Order not found", data: null }
        500:
          description: "Some error"
          example: { status: 500, message: "Some error", data: null }

  /users/new:
    post:
      tags:
        - Users
      summary: Create a new user
      description: 'Used to register a new user'
      operationId: createNewUser
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: "email"
          in: formData
          description: Email address of the new user
          required: true
          type: "string"
        - name: password
          in: formData
          description: Password of the new user
          required: true
          type: "string"
        - name: "first_name"
          in: formData
          description: First name of the new user
          required: false
          type: "string"
        - name: "name"
          in: formData
          description: Name of the new user
          required: false
          type: "string"
      responses:
        200:
          description: User successfully created
          example: { status: 200, message: "Successfully created", data: { email: "example@gmail.com"} }
        400:
          description: "Bad request"
          example: { status: 400, message: "Bad request", data: null }
        409:
          description: "Email already in use"
          example: { status: 409, message: "Some error message", data: null }
        501:
          description: "Email/password user creation not activated"
          example: { status: 501, message: "Some error message", data: null }

  /users/{user_id}/orders:
    get:
      tags:
        - Orders
      summary: Get list of user orders
      description: 'Used to get user orders listing'
      operationId: getUserOrders
      produces:
        - application/json
      parameters:
        - name: user_id
          in: path
          description: Id of the user where who we want to list the orders
          required: true
          type: string
      responses:
        200:
          description: "Success"
          example: { status: 200, message: "Success", data: [ { "user": "uemtuvtcz1", "id": "1lrxz9rdp7", "price": 99.99, "shop": "1o3ui7yat4", "products": [ "uemtuvtcz2" ] } ] }
        404:
          description: "User not found"
          example: { status: 404, message: "User not found", data: null }
        500:
          description: "Some error"
          example: { status: 500, message: "Some error message", data: null }

  /shops:
    get:
      tags:
        - Shops
      summary: Get a shop list
      description: 'Used to get a shop list'
      operationId: shopsList
      produces:
        - application/json
      parameters:
        - name: orderBy
          in: url
          description: Field to order by
          required: false
          type: "string"
        - name: limit
          in: url
          description: Limit the number of returned shops
          required: false
          type: "integer"
        - name: order
          in: url
          description: Sort by ascending or descending value
          required: false
          type: "string"
          examples:
            - "asc"
            - "desc"
      responses:
        200:
          description: "User successfully logged in"
          example: { status: 200, message: "Successfully logged in", data: { "shop_id": { "id": { "Shop object" } }, "other_shop_id": {"..."} } }
        400:
          description: "Bad request"
          example: { status: 400, message: "Some error message", data: null }

    post:
      tags:
        - Shops
      summary: Create a new shop
      description: 'Used to create a new shop'
      operationId: newShop
      produces:
        - application/json
      parameters:
        - name: name
          in: formData
          description: Shop name
          required: true
          type: "string"
        - name: types
          in: formData
          description: type of the shop
          required: true
          type: "integer"
          example:
            - "0"
        - name: latitude
          in: formData
          description: Shop latitude
          required: true
          type: "float"
        - name: longitude
          in: formData
          description: Shop longitude
          required: true
          type: "float"
      responses:
        200:
          description: "Shop successfully created"
          example: { status: 200, message: "Shop successfully created", data: { "id": "zy274buxqo", "name": "New shop", "picture_url": null, "latitude": "0.9876564", "longitude": "0.54324567", "types": ["bakery"] } }
        400:
          description: "Bad request"
          example: { status: 400, message: "Some error message", data: null }

  /shops/{shop_id}/orders:
    get:
      tags:
        - Orders
      summary: Get shop orders
      description: 'Used to get a list of orders passed in a shop'
      operationId: getShopOrders
      produces:
        - application/json
      parameters:
        - name: shop_id
          in: path
          description: Id of the shop
          required: true
          type: string
      responses:
        200:
          description: "Success"
          example: { status: 200, message: "Success", data: [ { "price": 99.99, "shop": "1o3ui7yat4", "products": [ "uemtuvtcz2" ], "user": "uemtuvtcz1", "id": "1lrxz9rdp7", "doc_id": "FIPhB37WpmXTr6YzxDx1" } ] }
        400:
          description: "Bad request"
          example: { status: 400, message: "Some error message", data: null }
        404:
          description: "Shop not found"
          example: { status: 404, message: "Shop not found", data: null }
        500:
          description: "Some error"
          example: { status: 500, message: "Some error message", data: null }
    post:
      tags:
        - Orders
      summary: Create a new order
      description: 'Used to create a new order'
      operationId: newOrder
      produces:
        - application/json
      parameters:
        - name: shop_id
          in: path
          description: Id of the shop where the order was passed
          required: true
          type: string
        - name: user
          in: body
          description: Id of the user who passed the order
          required: true
          type: string
          example: uemtuvtcz1
        - name: products
          in: body
          description: Sort by ascending or descending value
          required: false
          type: json
          example: ["product_id_1", "product_id_2"]
      responses:
        200:
          description: "User successfully logged in"
          example: { status: 200, message: "Order successfully created", data: { "id": "x8j8kjrn7m", "user": "uemtuvtcz1", "shop": "1o3ui7yat4", "products": [ "uemtuvtcz1", "uemtuvtcz1" ], "price": 25.38 } }
        400:
          description: "Bad request"
          example: { status: 400, message: "Some error message", data: null }
        404:
          description: "Shop not found"
          example: { status: 404, message: "Shop not found", data: null }
        500:
          description: "Some error"
          example: { status: 500, message: "Some error message", data: null }

  /shops/{shop_id}/products:
    get:
      tags:
        - Products
      summary: Get list of shop products
      description: 'Used to get shop products list'
      operationId: getShopProducts
      produces:
        - application/json
      parameters:
        - name: shop_id
          in: path
          description: Id of the shop where we want to list the products
          required: true
          type: string
        - name: order_by
          in: url
          description: Product name
          required: false
          type: string
        - name: order
          in: url
          description: Sort by ascending or descending value
          required: false
          type: string
          examples:
            - 'asc'
            - 'desc'
        - name: limit
          in: url
          description: Number of retured products
          required: false
          type: number
      responses:
        200:
          description: "Product successfully created"
          example: { status: 200, message: "Success", data: [ { "pictures": [ "/url/j/b/beurre" ], "id": "tl74u106eo", "price": "12.87", "stock": "112", "shop_id": "1o3ui7yat4", "name": "Sandwich jambon beurre" } ] }
        400:
          description: "Bad request"
          example: { status: 400, message: "Some error message", data: null }
        404:
          description: "Shop not found"
          example: { status: 404, message: "Shop XXXX not found", data: null }
        500:
          description: "Some error"
          example: { status: 500, message: "Some error message", data: null }

    post:
      tags:
        - Products
      summary: Create a new product
      description: 'Used to create a new product'
      operationId: newProduct
      produces:
        - application/json
      parameters:
        - name: shop_id
          in: path
          description: Id of the shop where we want to create the product
          required: true
          type: string
        - name: name
          in: body
          description: Product name
          required: true
          type: string
        - name: pictures
          in: body
          description: Product picture url
          required: true
          type: string
        - name: stock
          in: body
          description: Number of product in stock
          required: true
          type: number
        - name: price
          in: body
          description: Product price
          required: true
          type: number
      responses:
        200:
          description: "Product successfully created"
          example: { status: 200, message: "Product successfully created", data: { "id": "tl74u106eo", "name": "Sandwich jambon beurre", "pictures": [ "/url/j/b/beurre" ], "shop_id": "1o3ui7yat4", "stock": "112", "price": "12.87" } }
        400:
          description: "Bad request"
          example: { status: 400, message: "Some error message", data: null }
        404:
          description: "Shop not found"
          example: { status: 404, message: "Shop not found", data: null }
        500:
          description: "Some error"
          example: { status: 500, message: "Some error message", data: null }
  /users/{user_id}:
    get:
      tags:
        - Users
      summary: Get an user thanks to his Id
      description: 'Used to get a user'
      operationId: getUser
      produces:
        - application/json
      parameters:
        - name: user_id
          in: path
          description: Id of the requested user
          required: true
          type: string
      responses:
        200:
          description: "User Exist"
          example: { status: 200, message: "Success", data: [ { "first_name": "Rachid", "id": "tl74u106eo", "name": "Soussi", "picture_url": "/url/2", "role": "Marchand", "uid": "dsfgjydsfkvj" } ] }
        400:
          description: "Bad request"
          example: { status: 400, message: "Some error message", data: null }
        404:
          description: "User not found"
          example: { status: 404, message: "User XXXX not found", data: null }
        500:
          description: "Some error"
          example: { status: 500, message: "Some error message", data: null }
  /products/{product_id}/pictures:
    post:
      tags:
        - Products
      summary: Add a picture to a product
      description: 'Used to add a picture to a product'
      operationId: addProductPicture
      produces:
        - application/json
      parameters:
        - name: product_id
          in: path
          description: Id of the product
          required: true
          type: string
        - in: body
          name: RequestBody
          required: true
          schema:
            type: object
            required:
              - ext
              - base64
            properties:
              ext:
                type: string
                description: 'Image extension (jpeg, png, etc...)'
              base64:
                type: string
                description: 'Base64 string of the image'
      responses:
        200:
          description: "Picture successfully added to product"
          example: { status: 200, message: "Picture successfully added to product", data: { "id": "tl74u106eo", "name": "Sandwich jambon beurre", "pictures": [ "/url/j/b/beurre", "products/1ctmalvnnjy.jpg", "products/7fha4ysmmpb", "products/gh5zap8ek2b", "products/1wv02wwlpqd" ], "shop_id": "1o3ui7yat4", "stock": "112", "price": "12.87" } }
        422:
          description: "Error while adding picture to product OR Error while uploading picture"
          example: { status: 422, message: "Error message", data: null }
        400:
          description: "Bad request"
          example: { status: 400, message: "Bad request", data: null }
        404:
          description: "Product not found"
          example: { status: 404, message: "Product not found", data: null }
  /shop/{shop_id}/pictures:
    post:
      tags:
        - Shops
      summary: Add a picture to a shop
      description: 'Used to add a picture to a shop'
      operationId: addShopPicture
      produces:
        - application/json
      parameters:
        - name: shop_id
          in: path
          description: Id of the shop
          required: true
          type: string
        - in: body
          name: RequestBody
          required: true
          schema:
            type: object
            required:
              - ext
              - base64
            properties:
              ext:
                type: string
                description: 'Image extension (jpeg, png, etc...)'
              base64:
                type: string
                description: 'Base64 string of the image'
      responses:
        200:
          description: "Picture successfully added to shop"
          example: { status: 200, message: "Picture successfully added to shop", data: { "id": "giwbc129rv", "name": "Boulangerie", "pictures": [ "shops/vkw5zswo1g9.png" ], "latitude": null, "longitude": null, "types": [ "bakery" ] } }
        422:
          description: "Error while adding picture to shop OR Error while uploading picture"
          example: { status: 422, message: "Error message", data: null }
        400:
          description: "Bad request"
          example: { status: 400, message: "Bad request", data: null }
        404:
          description: "Shop not found"
          example: { status: 404, message: "Shop not found", data: null }
